apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.magpy"
    defaultConfig {
        applicationId "com.magpy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName "0.3.0"
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    signingConfigs {
        debug {
            if(project.file('debug.properties').exists()){
                Properties properties = new Properties()
                properties.load(project.file('debug.properties').newDataInputStream())
                

                if(properties.getProperty('storeFile') == null){
                    throw new GradleException("storeFile property not found inf debug.properties file.");
                }

                if(properties.getProperty('keyAlias') == null){
                    throw new GradleException("keyAlias property not found inf debug.properties file.");
                }

                if(properties.getProperty('keyPassword') == null){
                    throw new GradleException("keyPassword property not found inf debug.properties file.");
                }

                if(properties.getProperty('storePassword') == null){
                    throw new GradleException("storePassword property not found inf debug.properties file.");
                }

                storeFile file(properties.getProperty('storeFile'))
                keyAlias properties.getProperty('keyAlias')
                storePassword properties.getProperty('storePassword')
                keyPassword properties.getProperty('keyPassword')
            }else{
                throw new GradleException('File debug.properties not found in android/app')
            }
        }

        release {
            if(project.file('release.properties').exists()){
                Properties properties = new Properties()
                properties.load(project.file('release.properties').newDataInputStream())
                

                if(properties.getProperty('storeFile') == null){
                    throw new GradleException("storeFile property not found inf release.properties file.");
                }

                if(properties.getProperty('keyAlias') == null){
                    throw new GradleException("keyAlias property not found inf release.properties file.");
                }

                if(properties.getProperty('keyPassword') == null){
                    throw new GradleException("keyPassword property not found inf release.properties file.");
                }

                if(properties.getProperty('storePassword') == null){
                    throw new GradleException("storePassword property not found inf release.properties file.");
                }

                storeFile file(properties.getProperty('storeFile'))
                keyAlias properties.getProperty('keyAlias')
                storePassword properties.getProperty('storePassword')
                keyPassword properties.getProperty('keyPassword')
            }else{
                throw new GradleException('File release.properties not found in android/app.\nIf building for testing performance, copy and paste debug.properties, and rename it to release.properties to build the app using debug key.\nIf building for release, you need to fill out the file using the Playstore upload key information.')
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            
            signingConfig signingConfigs.release
            
        }
    }
}

dependencies {

    implementation 'com.google.guava:guava:33.2.0-jre'
    implementation 'androidx.lifecycle:lifecycle-process:2.6.1'
    def work_version = "2.9.0"
    implementation "androidx.work:work-runtime:$work_version"

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    androidTestImplementation('com.wix:detox:+')
    implementation 'androidx.appcompat:appcompat:1.1.0'
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"